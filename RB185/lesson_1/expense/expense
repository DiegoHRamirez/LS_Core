#! /usr/bin/env ruby

require 'pg'

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: "expenses")
    setup_schema
  end

  def list
    result = @connection.exec("SELECT * FROM expenses;")
    display_expenses(result)
  end

  def add(*expense_data)
    amount = expense_data[0]
    memo = expense_data[1]
    date = expense_data[2] ? expense_data[2] : Date.today

    sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3)"
    @connection.exec_params(sql, [amount, memo, date])
  end

  def search(query)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1"
    result = @connection.exec_params(sql, ["%#{query}%"])
    display_expenses(result)
  end

  def delete(query)
      result = select_id(query)

      if result.ntuples == 0
        puts "There is no expense with the id #{query}"
      else
        sql = "DELETE FROM expenses WHERE id = $1"
        @connection.exec_params(sql, [query.to_i])

        puts "The Following expense has been deleted: "
        display_expenses(result)
      end
  end

  def delete_all_expenses
    @connection.exec("DELETE FROM expenses")
    puts "All expenses have been deleted."
  end

  private

  def select_id(query)
    sql = "SELECT * FROM expenses WHERE id = $1"
    result = @connection.exec_params(sql, [query.to_i])
    result
  end

  def display_expenses(expenses)
    display_count(expenses)
    return if total(expenses) == 0

    expenses.each do |tuple|
          columns = [ tuple["id"].rjust(3),
                  tuple["created_on"].rjust(10),
                  tuple["amount"].rjust(12),
                  tuple["memo"] ]

          puts columns.join(" | ")
    end
    puts "#{'-' * 50}"
    puts "Total" + "#{' ' * 21}" + total(expenses).to_s
  end

  def display_count(expenses)
    count = expenses.ntuples
    if count == 0
      puts "There are no expenses."
    else
      puts "There are #{count} expense#{"s" if count != 1}."
    end
  end

  def total(expenses)
    expenses.field_values("amount").map(&:to_f).sum
  end

  def setup_schema
    result = @connection.exec <<~SQL
      "SELECT COUNT(*) FROM information_schema.tables
      WHERE table_schema = 'public' AND table_name = 'expenses';"
    SQL
    
    if result[0]["count"] = "0"
      @connection.exec <<~SQL
        CREATE TABLE expenses (
          id serial PRIMARY KEY,
          amount numeric(6,2) NOT NULL CHECK (amount >= 0.01),
          memo text NOT NULL,
          created_on date NOT NULL
        );
      SQL
    end
  end
end

class CLI
  def initialize
    @application = ExpenseData.new
  end

  def run(commands)
    if commands.empty?
      display_help
    elsif commands.first == 'clear'
      puts "This will remove all expenses. Are you sure? (y/n)"
      response = $stdin.getc
      @application.delete_all_expenses if response == 'y'
    else
      @application.send commands.shift, *commands   #send(*commands) rescue display_help
    end
  end

  def display_help
   puts <<~HELP.strip
   An expense recording system

   Commands:

   add AMOUNT MEMO [DATE] - record a new expense
   clear - delete all expenses
   list - list all expenses
   delete NUMER - remove expense with id NUMBER
   search QUERY - list expenses with a matching memo field

   HELP
  end
end

CLI.new.run(ARGV)